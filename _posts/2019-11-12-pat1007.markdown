---
tags:
- 编程及算法
---

# pat1007

## 题目

让我们定义d​n​​为：d​n​​=p​n+1​​−p​n​​，其中p​i​​是第i个素数。显然有d​1​​=1，且对于n>1有d​n​​是偶数。“素数对猜想”认为“存在无穷多对相邻且差为2的素数”。

现给定任意正整数N(<10​5​​)，请计算不超过N的满足猜想的素数对的个数。
输入格式:

输入在一行给出正整数N。
输出格式:

在一行中输出不超过N的满足猜想的素数对的个数。
输入样例:

20

输出样例:

4

## 题解

### 正确答案（个人)

```
#include<stdio.h>
int PrimeNumbers (int a){
	int h;
	for(int i=2;i<a;i++){
		if(a%i==0){
			h=1;
			break;
		}
		else{
			h=0;
		}
	}
	if(h==0) return 0;
	else return 1;
}
int main(void){
	int N,m=0,v,b;
	scanf("%d",&N);
	for(int i=3;i<N;i+=2){
		 if((PrimeNumbers(i)==0)){
		 	if((PrimeNumbers((i+2))==0)&&(i+2)<=N){
			m++;
		}
		}
	  }
    printf("%d",m);
    return 0;
}
```

### 代码改进

#### 判断素数函数

其中只需要判断n能否被3到sqrt（n）范围内的数整除就可以<br>
原因是当一个数能被整除时，两个除数必有一个大于sqrt（n），另一个小于sqrt（n）。

#### 线筛

```
#include<cstdio>
#define maxn 10000  // 设置数组大小 
#define INF 10000   // 素数筛选到多少为止 
using namespace std;
bool sai[100100];  //这个是用来判断这个数是否为素数，TRUE则为非素数 
int k[maxn],head;
void xiansai()
{
	sai[0] = true; sai[1] = true; //先将 1和 0 设置为非素数 
	for (int i = 2; i <= INF; i ++)  
		if (sai[i] == false)//如果这个数没有被打上标记则这个数是素数 
		{
			k[++head] = i; // 将这个数记录到素数数组的最后面 
			for (int j = 2; j*i <= INF ; j ++)// 向上判断，如果上面的数是可以由这个数相乘以一个数得到的话，那么这个数就不是素数 
				sai[i*j] = true;
		}
}
int main ()
{
	xiansai();
	
	for (int i = 1 ; i <= 100; i ++) //看第1到第100个素数是什么 
		printf("%d ",k[i]);
}
```

## 分析总结

其实这个题也没啥好分析的，就是一个判断素数然后循环就好了。<br>
可惜本人还是操作不熟练，又犯了main书写错误，以及scanf没加&这些低级错误，素数的判断结果写反了，外加之开始写的时候又忘了边界......<br>
总而言之前两个问题不能再犯，之后写代码之前应该注意下整体思路。本次学到的主要是素数的判断方法。（这里非常感谢元宵的帮助）