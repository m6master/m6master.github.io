---
tags:
- 编程及算法
---

# pat1004

## 题目
读入 n（>0）名学生的姓名、学号、成绩，分别输出成绩最高和成绩最低学生的姓名和学号。

### 输入格式：

每个测试输入包含 1 个测试用例，格式为

>第 1 行：正整数 n<br>
第 2 行：第 1 个学生的姓名 学号 成绩<br>
第 3 行：第 2 个学生的姓名 学号 成绩<br>
  ... ... ...<br>
第 n+1 行：第 n 个学生的姓名 学号 成绩<br>

其中姓名和学号均为不超过 10 个字符的字符串，成绩为 0 到 100 之间的一个整数，这里保证在一组测试用例中没有两个学生的成绩是相同的。

### 输出格式：

对每个测试用例输出 2 行，第 1 行是成绩最高学生的姓名和学号，第 2 行是成绩最低学生的姓名和学号，字符串间有 1 空格。

### 输入样例：

```
3
Joe Math990112 89
Mike CS991301 100
Mary EE990830 95
```

### 输出样例：

```
Mike CS991301
Joe Math990112
```

## 题解

```
#include <stdio.h>
#include <stdlib.h> 
 typedef struct{
    char name[15];
    char num[15];
    int score;
 } Student;
int main(void){
    int n,max,min,k,l;
    scanf("%d",&n);
    Student stu[n];
for(int i=0;i<n;i++){
     scanf("%s%s%d",stu[i].name,stu[i].num,&stu[i].score);
    }
    k=stu[0].score;l=stu[0].score;max=0;min=0;
    for(int j=1;j<n;j++){
      if(stu[j].score>k) {k=stu[j].score;max=j;}
      if(stu[j].score<l) {l=stu[j].score;min=j;}
     }
printf("%s %s\n",stu[max].name,stu[max].num);
    printf("%s %s\n",stu[min].name,stu[min].num);
    return 0;
}
```

## 分析反思

其实就是结构体的应用，加之比大小的思路。<br>但可惜本人过于愚钝，在操作中一开始不晓得结构体类型可否有Student stu[n]这种含有变量的类型。在知道可以使用后，先是把main打成了mian......然后又数组越界，佛。<br>
学到的就是结构体的使用，以及再次体会到了数组边界的威力（感觉数组里面下标最好不出现-（下界经常被超））。


# 洛谷

## 新手村1.1关

没啥好说的，都简单的一笔0.0<br>
就记一个玛丽好了
```
#include<stdio.h>
int main(void){
    printf("                ********\n");
    printf("               ************\n");
    printf("               ####....#.\n");
    printf("             #..###.....##....\n");
    printf("             ###.......######              ###            ###\n");
    printf("                ...........               #...#          #...#\n");
    printf("               ##*#######                 #.#.#          #.#.#\n");
    printf("            ####*******######             #.#.#          #.#.#\n");
    printf("           ...#***.****.*###....          #...#          #...#\n");
    printf("           ....**********##.....           ###            ###\n");
    printf("           ....****    *****....\n");
    printf("             ####        ####\n");
    printf("           ######        ######\n");
    printf("##############################################################\n");
    printf("#...#......#.##...#......#.##...#......#.##------------------#\n");
    printf("###########################################------------------#\n");
    printf("#..#....#....##..#....#....##..#....#....#####################\n");
    printf("##########################################    #----------#\n");
    printf("#.....#......##.....#......##.....#......#    #----------#\n");
    printf("##########################################    #----------#\n");
    printf("#.#..#....#..##.#..#....#..##.#..#....#..#    #----------#\n");
    printf("##########################################    ############\n");
    return 0;
}
```